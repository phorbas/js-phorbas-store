import * as test_bdd from '#test_bdd'
import {expect} from 'chai'

import {validate_backend} from '@phorbas/store/esm/validate_backend.js'
import {kbc_js_map} from '@phorbas/store'
import {kbc_xform} from '@phorbas/store'
import {kbc_xform_stream} from '@phorbas/store/esm/xform/xform_stream.js'


test_bdd.describe @ 'kbc xform variants', @::>
  test_bdd.describe @ 'kbc_xform', @::>
    _check_xform_using(kbc_xform)

  test_bdd.describe @ 'kbc_xform_stream', @::>
    _check_xform_using(kbc_xform_stream)

  function _check_xform_using(kbc_xform_variant) ::
    validate_backend @ test_bdd, 'xform noop', @{}
      kbc_create: () =>
        kbc_xform_variant @ kbc_js_map(), @{}
          kbc_lookup(rec) ::

    const _test_xform_keys_prefix = @{}
      kbc_lookup(rec, rec_api) ::
        rec_api.set_key(rec, 'xform-'+rec[0])

    validate_backend @ test_bdd, 'xform key prefix',
      () => kbc_xform_variant @ kbc_js_map(), @{}
        ... _test_xform_keys_prefix


    const _test_xform_body_prefix = @{}
      async encode_body(body) ::
        body = await body
        return new Blob(['XFM\0', body])

      async decode_body(body) ::
        body = await body
        if body ::
          let buf_prefix = new Uint8Array(body.slice(0,4))
          expect(buf_prefix).to.deep.equal @ // XFM\0
            Uint8Array.of(0x58, 0x46, 0x4d, 0x00)
          return body.slice(4)

    validate_backend @ test_bdd, 'xform body prefix',
      () => kbc_xform_variant @ kbc_js_map(), @{}
        ... _test_xform_body_prefix

    validate_backend @ test_bdd, 'xform key and body prefix',
      () => kbc_xform_variant @ kbc_js_map(), @{}
        ... _test_xform_body_prefix
        ... _test_xform_keys_prefix

