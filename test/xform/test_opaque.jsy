import * as test_bdd from '#test_bdd'
import {expect} from 'chai'

import {validate_backend} from '@phorbas/store/esm/validate_backend.js'
import {kbc_js_map} from '@phorbas/store'
import {kbc_opaque, kbc_xform_stream} from '@phorbas/store/esm/xform/index.js'

import {opaque_basic, opaque_tahoe} from '@phorbas/opaque'


const _rec_okey_tuple = okey => okey.hk21()
const _rec_okey_hk1 = okey => okey[1]
async function mock_inject_opaque_key({opaque, mock_tgt, key_mode}) ::
  const _as_rec_key = opaque.as_rec_key ?? @
    'tuple' === key_mode
      ? _rec_okey_tuple
      : _rec_okey_hk1

  // Inject mock opaque key transform
  return kbc_xform_stream @ mock_tgt, @{}
    kbc_lookup(rec, rec_api) ::
      let hexkey = rec[0]
      let okey = opaque.from_content(hexkey)
      rec_api.set_key @ rec, okey.then(_as_rec_key)


test_bdd.describe @ 'kbc with opaque variants', @::
  const test_matrix = @[]
    _with_opaque_test @: key_mode: 'hk1', opaque_basic
    _with_opaque_test @: key_mode: 'tuple', opaque_basic
    _with_opaque_test @: key_mode: 'hk1', opaque_tahoe
    _with_opaque_test @: key_mode: 'tuple', opaque_tahoe

  for let {key_mode, opaque_name, opaque} of test_matrix ::
    validate_backend @ test_bdd, `kbc with ${opaque_name} and key_mode: "${key_mode}"`,
      () => mock_inject_opaque_key @:
          key_mode, opaque,
          mock_tgt: kbc_opaque @:
            opaque, stg_tgt: kbc_js_map()


function _with_opaque_test({key_mode, ... by_name}) ::
  let [[opaque_name, opaque]] = Object.entries(by_name)
  return @{} key_mode, opaque_name, opaque

