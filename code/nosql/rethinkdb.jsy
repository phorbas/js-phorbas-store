import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_rethinkdb
export async function kbc_rethinkdb(opt={}) ::
  const connection=opt.connection, table=opt.table

  return _kbc_storage_.with @:
    kbc_opt: @{}

    async kbc_exists(key) ::
      let res = await table
        .get(key)
        .run(connection)

      return null != res ? 1 : 0

    async kbc_fetch(key) ::
      let res = await table
        .get(key)
        .run(connection)

      if null != res ::
        return _as_arrbuf(res.bc)

    async kbc_store(key, body) ::
      body = new Uint8Array(await kbc_arrbuf(body))
      try ::
        await table
          .insert @ 
            @{} id: key, bc: Buffer.from(body)
            @{} conflict: 'replace'
          .run(connection)
        return null
      catch err ::
        return err
