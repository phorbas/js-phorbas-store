import { _as_arrbuf, bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_rethinkdb
export async function bkc_rethinkdb(opt={}) ::
  const conn=opt.connection, table=opt.table

  return _bkc_storage_.with @:
    bkc_opt: @{}

    async bkc_exists(hexkey) ::
      let res = await table
        .get(hexkey)
        .run(connection)

      return null != res ? 1 : 0

    async bkc_fetch(hexkey) ::
      let res = await table
        .get(hexkey)
        .run(connection)

      if null != res ::
        return _as_arrbuf(res.bc)

    async bkc_store(hexkey, body) ::
      body = new Uint8Array(await bkc_arrbuf(body))
      try ::
        await table
          .insert @ 
            @{} id: hexkey, bc: Buffer.from(body)
            @{} conflict: 'replace'
          .run(connection)
        return null
      catch err ::
        return err
