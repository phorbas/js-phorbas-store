import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'
import {base64_to_u8, u8_to_base64} from 'u8-utils/base64.js'

export * from '../core.jsy'

export default kbc_arangojs
export async function kbc_arangojs(adb_collection, opt={}) ::
  const immutable = !! opt.immutable

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      let exists = await adb_collection.documentExists(key, opt.exists)
      return exists ? 1 : 0

    async kbc_fetch(key) ::
      let doc = await adb_collection.document(key, {graceful: true})

      if null != doc ::
        let u8 = base64_to_u8(doc.hc)
        return _as_arrbuf(u8)

    async kbc_store(key, body) ::
      let exists = await adb_collection.documentExists(key, opt.exists)
      if exists && immutable :: return false

      body = new Uint8Array(await kbc_arrbuf(body))
      let doc = @{} _key: key, hc: u8_to_base64(body)

      try ::
        if exists ::
          await adb_collection.replace(key, doc, opt.replace)
        else ::
          await adb_collection.save(doc, opt.save)
        return null
      catch err ::
        return err
