import { _as_arrbuf, bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_s3_fetch
export async function bkc_s3_fetch(url_bucket, opt={}) ::
  let module = await opt.module ?? 'https://cdn.jsdelivr.net/npm/aws4fetch/dist/aws4fetch.esm.js'
  if module.trim :: module = await import(module)

  let aws4fetch = new module.AwsClient({service: 's3', ... opt})
  return bkc_s3_aws4fetch(url_bucket, aws4fetch, opt)


export async function bkc_s3_aws4fetch(url_bucket, aws4fetch, opt={}) ::
  url_bucket = new URL(url_bucket)
  if ! url_bucket.pathname.endsWith('/') ::
    throw new Error('url must end with a slash ("/")')

  const _as_error = (resp, msg) =>
    new Error(`s3_aws4fetch[${url_bucket}]: ${resp.status} -- ${msg || resp.statusText}`)

  await _s3fetch_ensure_bucket(url_bucket, aws4fetch, opt.autocreate, _as_error)

  const _key_url = _s3fetch_bind_url(url_bucket, opt.base, opt.ext)
  return _bkc_storage_.with @:
    bkc_opt: @{}

    async bkc_exists(hexkey) ::
      let resp = await aws4fetch.fetch @
        _key_url(hexkey)
        @{} method: 'HEAD'

      if resp.ok ::
        return 1
      if 404 !== resp.status ::
        throw _as_error(resp)
      return 0


    async bkc_fetch(hexkey) ::
      let resp = await aws4fetch.fetch @
        _key_url(hexkey)
        @{} method: 'GET'

      if resp.ok ::
        return await resp.arrayBuffer()
      if 404 !== resp.status ::
        throw _as_error(resp)


    async bkc_store(hexkey, body) ::
      body = await bkc_arrbuf(body)
      let resp = await aws4fetch.fetch @
        _key_url(hexkey)
        @{} method: 'PUT', body,
            headers: @{}
              'Content-Type': 'application/octet-stream'
              'Content-Length': body.byteLength

      return resp.ok ? null : _as_error(resp)


function _s3fetch_bind_url(url_bucket, base, ext) ::
  base ||= ''; ext ||= ''
  return hexkey =>
    new URL(`${base}${hexkey}${ext}`, url_bucket)


async function _s3fetch_ensure_bucket(url_bucket, s3_aws4fetch, autocreate, _as_error) ::
  let resp_hasBucket =
    await s3_aws4fetch.fetch(
      new URL('?location', url_bucket))

  if ! resp_hasBucket.ok ::
    if (! autocreate)
      throw _as_error(resp_hasBucket, 'bucket does not exist on server')

    let resp_makeBucket =
      await s3_aws4fetch.fetch(
        url_bucket, { method: 'PUT', headers: {'Content-Length': 0}})

    if (! resp_makeBucket.ok)
      throw _as_error(resp_makeBucket, 'unable to autocreate bucket on server')
  return true

