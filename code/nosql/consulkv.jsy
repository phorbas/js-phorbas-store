import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_consulkv
export async function kbc_consulkv(consulkv, opt={}) ::
  let opt_path = '' + (opt.path || '/phorbas/').replace(/^\/+/, '')

  return _kbc_storage_.with @:
    kbc_opt: @{}

    async kbc_exists(key) ::
      let res = await consulkv.get @:
        raw: true, ... opt.has
        key: opt_path + key,

      return null != res ? 1 : 0

    async kbc_fetch(key) ::
      let res = await consulkv.get @:
        buffer: true, ... opt.get
        key: opt_path + key,

      if null != res ::
        return _as_arrbuf(res.Value)

    async kbc_store(key, body) ::
      body = new Uint8Array(await kbc_arrbuf(body))
      try ::
        await consulkv.set @:
          ... opt.set
          key: opt_path + key
          value: body //Buffer.from(u8_content)
        return null
      catch err ::
        return err

