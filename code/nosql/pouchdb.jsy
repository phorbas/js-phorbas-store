import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

const _as_u8 = arrbuf => new Uint8Array(arrbuf),
  _as_blob = arrbuf => new Blob([arrbuf])

export const kbc_pouchdb_direct = (pouchdb, opt) =>
  _kbc_pouchdb(pouchdb, opt, _as_u8)

export const kbc_pouchdb_blob = (pouchdb, opt) =>
  _kbc_pouchdb(pouchdb, opt, _as_blob)

export const kbc_pouchdb = (pouchdb, opt) =>
  _kbc_pouchdb(pouchdb, opt, globalThis.indexedDB ? _as_blob : _as_u8)

export default kbc_pouchdb

export async function _kbc_pouchdb(pouchdb, opt={}, as_attachment) ::
  const immutable = !! opt.immutable,
    opt_path = '' + (opt.path || '/phorbas/').replace(/^\/+/, ''),
    opt_pre = opt.pre || 'phorbas-',
    opt_ext = opt.ext || '.kbc',
    opt_mime = opt.mime || 'application/octet-stream'

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      let docId = opt_path + key
      let attachmentId = opt_pre + key + opt_ext
      try ::
        let {_attachments} = await pouchdb.get(docId)
        return _attachments[attachmentId] ? 1 : 0
      catch err ::
        if 404 !== err.status ::
          throw err
        return 0

    async kbc_fetch(key) ::
      let docId = opt_path + key
      let attachmentId = opt_pre + key + opt_ext
      try ::
        let res_att = await pouchdb.getAttachment(docId, attachmentId)
        if null != res_att ::
          res_att = res_att.arrayBuffer?.() ?? _as_arrbuf(res_att)
          return await res_att
      catch err ::
        if 404 !== err.status ::
          throw err

    async kbc_store(key, body) ::
      let docId = opt_path + key
      try ::
        var {_rev} = await pouchdb.get(docId)
        if immutable && _rev ::
          return false
      catch err ::
        if 404 !== err.status ::
          return err

      body = await kbc_arrbuf(body)
      let attachmentId = opt_pre + key + opt_ext
      try ::
        await pouchdb.putAttachment @
          docId, attachmentId, _rev,
          await as_attachment(body, opt_mime), opt_mime
        return null
      catch err ::
        return err

