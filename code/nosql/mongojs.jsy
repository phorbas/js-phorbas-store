import { _as_arrbuf, bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_mongojs
export async function bkc_mongojs(coll, {writeConcern}={}) ::
  return _bkc_storage_.with @:
    bkc_opt: @{}

    async bkc_exists(hexkey) ::
      let res = await coll.findOne({_id: hexkey}, {_id:1})
      return null != res ? 1 : 0

    async bkc_fetch(hexkey) ::
      let res = await coll.findOne({_id: hexkey}, {_id:1, bc:1})
      if null != res?.bc ::
        return _as_arrbuf(res.bc.buffer)

    async bkc_store(hexkey, body) ::
      body = new Uint8Array(await bkc_arrbuf(body))
      try ::
        await coll.updateOne @
          @{} _id: hexkey
          @{} $set: @{} bc: body
          @{} upsert: true
        return null
      catch err ::
        return err
