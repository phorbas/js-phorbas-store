import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_dynamodb
export async function kbc_dynamodb(ddb, opt={}) ::
  const [table, attr_key, attr_body] = await _ddb_ensureTable(ddb, opt)

  return _kbc_storage_.with @:
    kbc_opt: @{}

    async kbc_exists(key) ::
      let res = await ddb.batchGetItem @:
        RequestItems: @{}
          [table]: @{}
            Keys: @[]
              @{} [attr_key]: {S: key}
            ProjectionExpression: attr_key

      for let ea of res.Responses[table] ::
        return 1
      return 0


    async kbc_fetch(key) ::
      let res = await ddb.batchGetItem @:
        RequestItems: @{}
          [table]: @{}
            Keys: @[]
              @{} [attr_key]: {S: key}
            ProjectionExpression: attr_body

      for let ea of res.Responses[table] ::
        return _as_arrbuf(ea[attr_body].B)


    async kbc_store(key, body) ::
      body = new Uint8Array(await kbc_arrbuf(body))

      try ::
        await ddb.batchWriteItem @:
          RequestItems: @{}
            [table]: @[]
              @{} PutRequest: @{}
                Item: @{}
                  [attr_key]: {S: key}
                  [attr_body]: {B: body}

        return null
      catch err ::
        return err


async function _ddb_ensureTable(ddb, opt) ::
  let table = opt.table || 'phorbas_kv'
  let attr_key = opt.k || 'k'
  let attr_body = opt.bc || 'bc'

  try ::
    await ddb.createTable({
      TableName: table,
      ProvisionedThroughput: {
        ReadCapacityUnits: 1,
        WriteCapacityUnits: 1,
      },
      AttributeDefinitions: [
        { AttributeName: attr_key, AttributeType: 'S' },
      ],
      KeySchema: [
        { AttributeName: attr_key, KeyType: 'HASH' },
      ],
      ... opt.create_table })

  catch err ::
    if `${err}`.startsWith('#ResourceInUseException') ::
      throw err
    // else table already exists

  return [table, attr_key, attr_body]

