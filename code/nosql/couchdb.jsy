import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_couchdb
export async function kbc_couchdb(db_nano, opt={}) ::
  if opt.database ::
    // autocreate database, if not exists
    await db_nano.db.create(opt.database).catch(()=>{})
    db_nano = db_nano.use(opt.database)

  const immutable = !! opt.immutable,
    opt_path = '' + (opt.path || '/phorbas/').replace(/^\/+/, ''),
    opt_pre = opt.pre || 'phorbas-',
    opt_ext = opt.ext || '.kbc',
    opt_mime = opt.mime || 'application/octet-stream'

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      let docId = opt_path + key
      let attachmentId = opt_pre + key + opt_ext
      try ::
        let {_attachments} = await db_nano.get(docId)
        return _attachments[attachmentId] ? 1 : 0
      catch err ::
        if 'missing' != err.reason && 404 != err.statusCode ::
          throw err
        return 0

    async kbc_fetch(key) ::
      let docId = opt_path + key
      let attachmentId = opt_pre + key + opt_ext
      try ::
        let res_att = await db_nano.attachment.get(docId, attachmentId)
        if null != res_att ::
          return await _as_arrbuf(res_att)
      catch err ::
        if 'missing' != err.reason && 404 != err.statusCode ::
          throw err

    async kbc_store(key, body) ::
      let docId = opt_path + key
      try ::
        var {_rev} = await db_nano.get(docId)
        if immutable && _rev ::
          return false
      catch err ::
        if 'missing' != err.reason && 404 != err.statusCode ::
          return err

      body = await kbc_arrbuf(body)
      let attachmentId = opt_pre + key + opt_ext
      try ::
        await db_nano.attachment.insert @
          docId, attachmentId,
          body, opt_mime,
          {rev: _rev}
        return null
      catch err ::
        return err

