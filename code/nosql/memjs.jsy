import { _as_arrbuf, bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_memjs
export async function bkc_memjs(memjs, opt={}) ::
  const immutable = !! opt.immutable
  const opt_path = '' + (opt.path || '')
  if opt_path :: delete opt.path

  return _bkc_storage_.with @:
    bkc_opt: @{} immutable

    async bkc_exists(hexkey) ::
      let {value:buf} = await memjs.get(opt_path + hexkey)
      return null != buf ? 1 : 0

    async bkc_fetch(hexkey) ::
      let {value:buf} = await memjs.get(opt_path + hexkey)
      if null != buf ::
        return _as_arrbuf(buf)

    async bkc_store(hexkey, body) ::
      if immutable ::
        let {value:buf} = await memjs.get(opt_path + hexkey)
        if null != buf :: return false

      body = new Uint8Array(await bkc_arrbuf(body))
      try ::
        await memjs.set(opt_path + hexkey, body, opt)
        return null
      catch err ::
        return err

