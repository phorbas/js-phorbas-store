import {bkc_hexkey_api} from '../_utils.jsy'

export default bkc_with_minio
export async function bkc_with_minio(minio, opt={}) ::
  if 'string' === typeof opt ::
    opt = {bucket: opt}

  const {bucket} = opt, base = opt.base || '', ext = opt.ext || ''
  if ! bucket ::
    throw new Error('opt.bucket required')

  return bkc_hexkey_api @:

    async hk_has(hex_key) ::
      try ::
        await minio.statObject( bucket, `${base}${hex_key}${ext}` )
        return 1
      catch err ::
        if 'NotFound' === err.code ::
          return 0
        else throw err

    async hk_get(hex_key) ::
      let stream
      try ::
        stream = await minio.getObject( bucket, `${base}${hex_key}${ext}` )
      catch err ::
        if 'NoSuchKey' === err.code ::
          return
        else throw err

      const parts = []
      for await const p of stream ::
        parts.push(p)

      return Uint8Array.from @
        Buffer.concat(parts)

    async hk_set(hex_key, u8_content) ::
      try ::
        await minio.putObject @
          bucket, `${base}${hex_key}${ext}`,
          Buffer.from(u8_content)
      catch err ::
        return err

