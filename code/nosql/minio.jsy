import {bkc_hexkey_api} from '../_utils.jsy'

export default bkc_with_minio
export async function bkc_with_minio(opt={}) ::
  const {minio, bucket} = opt
  const base = opt.base || ''
  const ext = opt.ext || ''

  if ! await minio.bucketExists(bucket) ::
    await minio.makeBucket(bucket, opt.region || 'us-east-1')
  
  return bkc_hexkey_api @:

    async hk_has(hex_key) ::
      try ::
        await minio.statObject( bucket, `${base}${hex_key}${ext}` )
        return 1
      catch err ::
        if 'NotFound' === err.code ::
          return 0
        else throw err

    async hk_get(hex_key) ::
      let stream
      try ::
        stream = await minio.getObject( bucket, `${base}${hex_key}${ext}` )
      catch err ::
        if 'NoSuchKey' === err.code ::
          return
        else throw err

      const parts = []
      for await const p of stream ::
        parts.push(p)

      return Uint8Array.from @
        Buffer.concat(parts)

    async hk_set(hex_key, u8_content) ::
      try ::
        await minio.putObject @
          bucket, `${base}${hex_key}${ext}`,
          Buffer.from(u8_content)
      catch err ::
        return err

