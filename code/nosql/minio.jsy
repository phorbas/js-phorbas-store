import { _as_arrbuf, bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_minio
export async function bkc_minio(minio, opt={}) ::
  if 'string' === typeof opt ::
    opt = {bucket: opt}

  const {bucket} = opt, base = opt.base || '', ext = opt.ext || ''
  if ! bucket ::
    throw new Error('opt.bucket required')

  if ! await minio.bucketExists(bucket) ::
    throw new Error('bucket does not exist on server')

  return _bkc_storage_.with @:
    bkc_opt: @{}

    async bkc_exists(hexkey) ::
      try ::
        await minio.statObject( bucket, `${base}${hexkey}${ext}` )
        return 1
      catch err ::
        if 'NotFound' !== err.code ::
          throw err
        return 0

    async bkc_fetch(hexkey) ::
      try ::
        var stream = await minio.getObject( bucket, `${base}${hexkey}${ext}` )
      catch err ::
        if 'NoSuchKey' !== err.code ::
          throw err
        return

      const parts = []
      for await const p of stream ::
        parts.push(p)

      return new Blob(parts).arrayBuffer()

    async bkc_store(hexkey, body) ::
      body = Buffer.from(await bkc_arrbuf(body))
      try ::
        await minio.putObject(
          bucket, `${base}${hexkey}${ext}`, body)
        return null
      catch err ::
        return err

