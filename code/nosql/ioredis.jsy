import { _as_arrbuf, kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_ioredis
export async function kbc_ioredis(ioredis, opt={}) ::
  const immutable = !! opt.immutable
  const opt_path = `${opt.path || ''}`

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      let v = await ioredis.exists(opt_path + key)
      return v ? 1 : 0

    async kbc_fetch(key) ::
      let buf = await ioredis.getBuffer(opt_path + key)
      if null != buf ::
        return _as_arrbuf(buf)

    async kbc_store(key, body) ::
      if immutable ::
        let v = await ioredis.exists(opt_path + key)
        if v :: return false

      body = await kbc_arrbuf(body)
      try ::
        await ioredis.setBuffer @
          opt_path + key,
          Buffer.from(body)
        return null
      catch err ::
        return err

