import {bkc_hexkey_api, as_hex} from '../_utils.jsy'

export default bkc_with_ioredis_pipeline

export async function bkc_with_ioredis_direct(ioredis) ::
  return bkc_hexkey_api @:

    async hk_has(hex_key) ::
      return await ioredis.exists(hex_key)

    async hk_get(hex_key) ::
      const buf = await ioredis.getBuffer(hex_key)
      if null != buf ::
        return Uint8Array.from(buf)

    async hk_set(hex_key, u8_content) ::
      try ::
        await ioredis.setBuffer(hex_key,
          Buffer.from(u8_content))
      catch err ::
        return err


export async function bkc_with_ioredis_pipeline(ioredis) ::
  return @{}

    async bkc_exists(u8_key_list) ::
      const ops = []
      for let u8_key of u8_key_list ::
        ops.push @# 'exists', as_hex(u8_key)

      const res = await ioredis.pipeline(ops).exec()

      for let i=0; i<res.length; i++ ::
        //const [err, ans] = res[i]
        res[i][0] = u8_key_list[i]
      return res

    async bkc_fetch(u8_key_list) ::
      const ops = []
      for let u8_key of u8_key_list ::
        ops.push @# 'getBuffer', as_hex(u8_key)

      const res = await ioredis.pipeline(ops).exec()

      for let i=0; i<res.length; i++ ::
        const [err, buf] = res[i]
        res[i][0] = u8_key_list[i]
        res[i][1] = null == buf ? void buf
          : Uint8Array.from(buf)
      return res

    async bkc_store(u8_pair_list) ::
      const ops = []

      for let [u8_key, u8_content] of u8_pair_list ::
        ops.push @# 'setBuffer',
          as_hex(u8_key),
          Buffer.from(u8_content)

      const res = await ioredis.pipeline(ops).exec()

      for let i=0; i<res.length; i++ ::
        const [err, buf] = res[i]
        res[i][0] = u8_pair_list[i][0]
        res[i][1] = null == err ? void err : err
      return res

