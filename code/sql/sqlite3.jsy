import {bkc_hexkey_api, as_hex_key, as_u8_key} from '../_utils.jsy'

export {as_hex_key, as_u8_key}

export default bkc_with_sqlite3
export async function bkc_with_sqlite3(db, opt={}) ::
  let immutable = !! opt.immutable
  let table = opt.table || 'phorbas_kv'
  ::
    let sql_create = `CREATE TABLE IF NOT EXISTS "${table}" ( "hk" TEXT PRIMARY KEY, "bc" BLOB );`
    await new Promise @\ resolve, reject ::
      db.run @ sql_create, err => err ? reject(err) : resolve()

  let sql_has = `SELECT 1 FROM "${table}" WHERE "hk"=?`
  let sql_get = `SELECT "hk", "bc" FROM "${table}" WHERE "hk"=?`
  let sql_set = `INSERT ${immutable ? '' : 'OR REPLACE'} INTO "${table}" ("hk", "bc") VALUES (?, ?)`

  return bkc_hexkey_api @:
    bkc_opt: @{} immutable

    hk_has: hex_key =>
      new Promise @\ resolve, reject ::
        db.get @ sql_has, hex_key,
          @\ err, ans ::
            if (err) return reject(err)
            resolve(ans ? 1 : 0)

    hk_get: hex_key =>
      new Promise @\ resolve, reject ::
        db.get @ sql_get, hex_key,
          @\ err, ans ::
            if (err) return reject(err)
            resolve @ null == ans ? void ans
              : Uint8Array.from(ans.bc)

    hk_set: @\ hex_key, u8_content =>
      new Promise @\ resolve ::
        db.run @ sql_set, hex_key, Buffer.from(u8_content),
          err => !err ? resolve()
            : immutable && 19===err.errno ? resolve(false)
            : resolve(err)

