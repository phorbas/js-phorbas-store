import {bkc_hexkey_api, as_hex_key, as_u8_key} from '../_utils.jsy'

export {as_hex_key, as_u8_key}

export default bkc_with_knex
export async function bkc_with_knex(knex, opt={}) ::
  let immutable = !! opt.immutable
  let table = opt.table || 'phorbas_kv'

  if ! await knex.schema.hasTable(table) ::
    await knex.schema.createTable @ table, @\ t ::
      let {key_type, blob_type} = opt

      let col_key = key_type
        ? t.specificType('hk', key_type)
        : t.string('hk')

      col_key.unique().notNullable().primary()

      let col_bc = blob_type
        ? t.specificType('bc', blob_type)
        : t.binary('bc')

      col_bc.notNullable()


  return bkc_hexkey_api @:
    bkc_opt: @{} immutable

    async hk_has(hex_key) ::
      let ans = await knex(table)
        .select('hk')
        .where('hk', hex_key)
        .first()

      return null != ans ? 1 : 0

    async hk_get(hex_key) ::
      let ans = await knex(table)
        .select('bc')
        .where('hk', hex_key)
        .first()

      if null != ans ::
        return Uint8Array.from(ans.bc)

    async hk_set(hex_key, u8_content) ::
      let bc = u8_content

      try ::
        await knex(table).insert({hk: hex_key, bc})
      catch err ::
        if immutable ::
          // Note: better to ensure `err` is a constraint error, but
          // inconsistent error returns between backends
          return false

        try ::
          await knex(table)
            .where({hk: hex_key})
            .update({bc})
        catch err2 ::
          return err

