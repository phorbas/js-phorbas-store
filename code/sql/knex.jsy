import { _as_arrbuf, bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_with_knex
export async function bkc_with_knex(knex, opt={}) ::
  const immutable = !! opt.immutable
  const table = opt.table || 'phorbas_kv'
  const U8Buffer = opt.U8Buffer ?? globalThis.Buffer ?? Uint8Array

  if ! await knex.schema.hasTable(table) ::
    await knex.schema.createTable @ table, t => ::
      let {key_type, blob_type} = opt

      let col_key = key_type
        ? t.specificType('hk', key_type)
        : t.string('hk')

      col_key.unique().notNullable().primary()

      let col_bc = blob_type
        ? t.specificType('bc', blob_type)
        : t.binary('bc')

      col_bc.notNullable()


  return _bkc_storage_.with @:
    bkc_opt: @{} immutable

    async bkc_exists(hexkey) ::
      let ans = await knex(table)
        .select('hk')
        .where('hk', hexkey)
        .first()

      return null != ans ? 1 : 0

    async bkc_fetch(hexkey) ::
      let ans = await knex(table)
        .select('bc')
        .where('hk', hexkey)
        .first()

      if null != ans ::
        return _as_arrbuf(ans.bc)

    async bkc_store(hexkey, body) ::
      body = U8Buffer.from(await bkc_arrbuf(body))

      try ::
        await knex(table).insert({hk: hexkey, bc: body})
        return null
      catch err ::
        if immutable ::
          // Note: better to ensure `err` is a constraint error, but
          // inconsistent error returns between backends
          return false

      try ::
        await knex(table)
          .where({hk: hexkey})
          .update({bc: body})
        return null
      catch err ::
        return err

