import { as_u8_key, as_hex_key, storage_api_verify  } from '../_utils.jsy'
import { _basic_responses, u8_body_for_stream } from './web_resp.jsy'
export * from './web_resp.jsy'


export function opaque_web_responses(store_api, opt={}) ::
  if null != store_api ::
    storage_api_verify(store_api)

  return @{}
    __proto__: _basic_responses(opt)
    store_api

    async resp_has(request, store_api=this.store_api) ::
      try ::
        let hex_key = this.hk_for(request)
        let exists =
          await store_api.exists @
            as_u8_key(hex_key)

        let {hdr} = this
        return new this.Response @ null,
          @{} status: exists ? 200 : 404
              headers: @{} ...hdr.common, ... hdr.has

      catch err ::
        return this._resp_500(err, 'has')


    async resp_get(request, store_api=this.store_api) ::
      try ::
        let hex_key = this.hk_for(request)
        let [mime, u8_body, content_hdrs] =
          await store_api.fetch_obj @
            as_u8_key(hex_key), []

        let {hdr} = this
        return new this.Response @ u8_body,
          @{} status: u8_body ? 200 : 404
              headers: @{} 
                ... content_hdrs
                'Content-Type': mime || 'application/octet-stream'
                'X-Content-Type-Options': 'nosniff'
                ...hdr.common, ... hdr.get,
                'Content-Length': u8_body ? u8_body.byteLength : 0

      catch err ::
        return this._resp_500(err, 'get')


    async resp_set(request, store_api=this.store_api) ::
      try ::
        let hex_key = this.hk_for(request)
        let req_hdr = request.headers
        let mime = req_hdr['content-type']
        let u8_body = await u8_body_for_stream(request)

        let content_obj = @[] mime, u8_body,
          _content_headers_for(req_hdr, opt.inc_headers)

        let k21pair = ! hex_key
          ? await store_api.store_obj(content_obj)

          : await store_api.store_obj_at @
              as_u8_key(hex_key), content_obj, {k1: true}

        if ! k21pair ::
          return new this.Response('', {status: 400})

        let hk21 = k21pair.map @ as_hex_key

        let {hdr} = this
        return new this.Response @
          JSON.stringify({hk21}),
          @{} status: 200
              headers: @{} ...hdr.common, ... hdr.set
                'Content-Type': 'application/json',
                'x-hk2': hk21[0]
                'x-hk1': hk21[1]

      catch err ::
        return this._resp_500(err, 'set')

function _content_headers_for(req_hdr, inc_headers=['Content-Encoding']) ::
  let res = {}
  for let key of inc_headers ::
    let h = req_hdr[key]
    if h :: res[key] = h

  return res

