import {web_respondWith_bkc, web_responses_bkc} from './web_resp.jsy'
export * from './web_resp.jsy'


const _resp_by_method = /* #__PURE__ */ @{}
  HEAD: 'resp_has'
  GET: 'resp_get'
  PUT: 'resp_set'
  POST: 'resp_set'
  OPTIONS: 'resp_options'



export function node_responses_bkc(stg, opt={}) ::
  opt = _use_reqevt(opt)
  let proto = web_responses_bkc(stg, opt)
  return _node_responses_impl(proto, opt)

export function _node_responses_impl(proto) ::
  return @{} __proto__: proto,

    ... proto.rebind @ fn_name =>
          @\ req, resp ::>
            let ans = await proto[fn_name](req)
            resp
              .writeHead(ans.status, ans.headers || {})
              .end(ans.body)

    get handler() ::
      return (req, resp) => this.method_for(req.method)(req, resp)

    method_for(method) ::
      let k = _resp_by_method[method]
      return this[k || 'resp_500']



export function node_respondWith_bkc(stg, opt={}) ::
  opt = _use_reqevt(opt)
  let proto = web_respondWith_bkc(stg, opt)
  return _node_respondWith_impl(proto, opt)

export function _node_respondWith_impl(proto, {as_evt}) ::
  return @{} __proto__: proto, as_evt,

    ... proto.rebind @ fn_name =>
          (req, resp) => proto[fn_name](as_evt(req, resp))

    get handler() ::
      return (req, resp) => this.method_for(req.method)(req, resp)

    method_for(method) ::
      let k = _resp_by_method[method]
      return this[k || 'resp_500']



export function with_cors(opt) ::
  let hdr = opt.hdr || {}, cors = opt.cors || {}

  hdr.common = @{}
    'Access-Control-Allow-Origin': cors.origin || '*',
    'Access-Control-Max-Age': cors.max_age || '10',
    'Access-Control-Allow-Methods': cors.methods || 'HEAD, GET, POST, PUT, OPTIONS',
    'Access-Control-Allow-Headers': cors.allow_headers || cors.headers || 'Content-Type, Content-Length, x-hk, x-hk1, x-hk2',
    'Access-Control-Expose-Headers': cors.expose_headers || cors.headers || 'x-hk, x-hk1, x-hk2',
    ... hdr.common

  hdr.options = @{}
    ... hdr.options
    ... hdr.cors

  opt.hdr = hdr
  opt.cors = cors
  return opt



const _mini_reqevt_api = /* #__PURE__ */ @{}
  Response: /*constructor*/ function (body, {status, headers}={}) ::
    return { body, status, headers }

  as_evt(request, _resp_) ::
    let {url, headers: h} = request
    return @{}
      request, url: `${h.origin||''}${url}`
      async respondWith(ans) ::
        ans = await ans
        _resp_
          .writeHead(ans.status, ans.headers || {})
          .end(ans.body)


export function _use_reqevt(opt, reqevt_api=_mini_reqevt_api) ::
  opt = @{} ... reqevt_api, ... opt
  for let fn_with_opt of opt.extend || [] ::
    opt = fn_with_opt(opt)
  return opt

