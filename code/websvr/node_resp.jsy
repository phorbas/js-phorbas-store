import {web_responses_bkc} from './web_resp.jsy'
export * from './web_resp.jsy'


export function node_responses_bkc(stg, opt={}) ::
  opt = _use_reqevt(opt)
  return web_responses_bkc(stg, opt)


export function with_cors(opt) ::
  let hdr = opt.hdr || {}, cors = opt.cors || {}

  hdr.common = @{}
    'Access-Control-Allow-Origin': cors.origin || '*',
    'Access-Control-Max-Age': cors.max_age || '10',
    'Access-Control-Allow-Methods': cors.methods || 'HEAD, GET, POST, PUT, OPTIONS',
    'Access-Control-Allow-Headers': cors.allow_headers || cors.headers || 'Content-Type, Content-Length, x-hk, x-hk1, x-hk2',
    'Access-Control-Expose-Headers': cors.expose_headers || cors.headers || 'x-hk, x-hk1, x-hk2',
    ... hdr.common

  hdr.options = @{}
    ... hdr.options
    ... hdr.cors

  opt.hdr = hdr
  opt.cors = cors
  return opt


export async function _node_respondWith(ans, response) ::
  ans = await ans
  response
    .writeHead(ans.status, ans.headers || {})
    .end(ans.body)

export function as_mini_reqevt(request, response) ::
  let {url, headers: h} = request
  return @{}
    request, url: `${h.origin||''}${url}`
    respondWith: ans =>
      _node_respondWith(ans, response)

function MiniResponse(body, {status, headers}={}) ::
  return { body, status, headers }

export const mini_node_reqevt = @{}
  Response: MiniResponse

  as_handler(resp_fn) ::
    return (request, response) => ::
      let ans = resp_fn(request)
      return _node_respondWith(ans, response)


export function _use_reqevt(opt, {as_handler, Response}=mini_node_reqevt) ::
  opt = @{} Response, as_handler, ... opt
  for let fn_with_opt of opt.extend || [] ::
    opt = fn_with_opt(opt)
  return opt

