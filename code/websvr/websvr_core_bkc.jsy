import { as_u8_key, as_hex_key, bkc_storage_verify} from '../_utils.jsy'
import { _websvr_basic, u8_body_for_stream } from './basic_websvr.jsy'

export { as_u8_key, as_hex_key }


export default websvr_core_bkc
export function websvr_core_bkc(stg, opt={}) ::
  if null != stg ::
    bkc_storage_verify(stg)

  return @{}
    __proto__: _websvr_basic(opt)
    stg

    async resp_HEAD(request, stg=this.stg) ::
      try ::
        let hex_key = this.hk_for(request)
        let [[, exists]] =
          await stg.bkc_exists @#
            as_u8_key(hex_key)

        let {hdr} = this
        return new this.Response @ null,
          @{} status: exists ? 200 : 404
              headers: @{} ... hdr.common, ... hdr.has

      catch err ::
        return this._resp_500(err, 'has')


    async resp_GET(request, stg=this.stg) ::
      try ::
        let hex_key = this.hk_for(request)
        let [[, u8_body]] =
          await stg.bkc_fetch @#
            as_u8_key(hex_key)

        let {hdr} = this
        return new this.Response @ u8_body,
          @{} status: u8_body ? 200 : 404
              headers: @{}
                'Content-Type': 'application/octet-stream',
                'X-Content-Type-Options': 'nosniff'
                ... hdr.common, ... hdr.get,
                'Content-Length': u8_body ? u8_body.byteLength : 0

      catch err ::
        return this._resp_500(err, 'get')

    get resp_POST() :: return this.resp_PUT
    async resp_PUT(request, stg=this.stg) ::
      try ::
        let hex_key = this.hk_for(request)
        let u8_body = await u8_body_for_stream(request)
        let [[, error]] =
          await stg.bkc_store @#
            [as_u8_key(hex_key), u8_body]

        let {hdr} = this
        return new this.Response @ null,
          @{} status: error ? 400 : 200
              headers: @{} ... hdr.common, ... hdr.set

      catch err ::
        return this._resp_500(err, 'set')

