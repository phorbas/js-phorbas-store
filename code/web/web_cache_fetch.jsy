import { kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'
import {_bind_key_request} from './fetch.jsy'

export * from '../core.jsy'

export default kbc_web_cache_fetch
export async function kbc_web_cache_fetch(cache_store, url_base, opt={}) ::
  const as_req = opt.as_request ?? _bind_key_request(opt)

  const immutable = !! opt.immutable
  const _opt_match = opt.match ?? {ignoreMethod: true}

  cache_store = await cache_store
  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key, kw) ::
      let req = as_req(url_base, key, kw?.signal)
      let resp = await cache_store.match(req, _opt_match)

      if undefined === resp ::
        try :: // attempt fetching it
          await cache_store.add(req)
        catch err ::
          return 0

      return 1

    async kbc_fetch(key, kw) ::
      let req = as_req(url_base, key, kw?.signal)
      let resp = await cache_store.match(req, _opt_match)

      if undefined === resp ::
        try :: // attempt fetching it
          await cache_store.add(req)
        catch err :: return

        resp = await cache_store.match(req)

      return resp.arrayBuffer()

    async kbc_store(key, body, kw) ::
      let req = as_req(url_base, key, kw?.signal), resp
      if immutable ::
        resp = await cache_store.match(req, _opt_match)
        try ::
          resp ??= await cache_store.add(req)
          return false // return false for immutable existing entry
        catch err :: // pass

      body = await kbc_arrbuf(body)
      resp = await fetch @ req.url,
        @{} method: 'POST'
            signal: kw?.signal
            body

      if ! resp.ok ::
        let {url, status, statusText} = resp
        let err = new Error(`${statusText || status}`)
        err.url = resp.url
        err.status = status
        return err

      resp = new Response @
        body = await kbc_arrbuf(body),
        @{} status: 200, headers: @{} 'Content-Length': body.byteLength

      await cache_store.put(req, resp)
      return null
