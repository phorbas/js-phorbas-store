import { bkc_arrbuf, bkc_rec_arrbuf, bkc_batch_stream, _bkc_fetch_ans  } from '../core.jsy'
import { _bkc_stream_storage_ } from '../abstract/bkc_abstract_stream.jsy'

export * from '../core.jsy'

export default bkc_web_db
export async function bkc_web_db(opt={}) ::
  if 'string' === typeof opt ::
    let [db, store] = opt.split('/')
    opt = {db, store}

  const store_name = opt.store || 'kv'
  const db_name = opt.db || 'phorbas'

  if opt.wipe ::
    await _idb_req @
      indexedDB.deleteDatabase(db_name)

  const req_open = indexedDB.open(db_name, 1)
  req_open.onupgradeneeded = evt =>
    evt.target.result.createObjectStore(store_name)

  const idb = await _idb_req(req_open)

  return Object.create @ _bkc_indexdb_proto_, @{}
    _txn_ro: @{} value: ()=> _idb_txn(idb, store_name, 'readonly')
    _txn_rw: @{} value: ()=> _idb_txn(idb, store_name, 'readwrite')



const _bkc_indexdb_proto_ = _bkc_stream_storage_.with @:
  bkc_opt: @{}

  async * bkc_stream_exists(hexkey_aiter, kw) ::
    let _bkc_rec = this._bkc_record()
    for await let batch of bkc_batch_stream(hexkey_aiter, _bkc_rec, kw) ::
      let [kvdb, txn_done] = this._txn_ro()
      for let rec of batch ::
        rec[1] = kvdb.count(rec[0])

      await txn_done

      for const rec of batch ::
        rec[1] = rec[1].result ? 1 : 0

      yield batch

  async * bkc_stream_fetch(hexkey_aiter, kw) ::
    let _bkc_rec = this._bkc_record()
    for await let batch of bkc_batch_stream(hexkey_aiter, _bkc_rec, kw) ::
      let [kvdb, txn_done] = this._txn_ro()
      for let rec of batch ::
        rec[1] = kvdb.get(rec[0])

      await txn_done

      for const rec of batch ::
        rec[1] = _bkc_fetch_ans(rec[1].result, false, kw?.xform)

      yield batch

  async * bkc_stream_store(hexkey_body_aiter, kw) ::
    let _bkc_body_rec = this._bkc_record(bkc_rec_arrbuf)

    for await let batch of bkc_batch_stream(hexkey_body_aiter, _bkc_body_rec, kw) ::
      for let rec of batch ::
        rec[1] = await rec[1]

      let [kvdb, txn_done] = this._txn_rw()
      for let rec of batch ::
        rec[1] = kvdb.put(rec[1], rec[0])

      await txn_done

      for const rec of batch ::
        rec[1] = rec[1].error ?? null

      yield batch


function _idb_txn(idb, store_name, mode) ::
  const txn = idb.transaction(store_name, mode)
  return @[]
    txn.objectStore(store_name),
    new Promise @\ resolve, reject ::
      txn.oncomplete = resolve
      txn.onabort = txn.onerror = @=> reject @ txn.error

function _idb_req(req) ::
  return new Promise @\ resolve, reject ::
    req.onsuccess = @=> resolve @ req.result
    req.onerror = @=> reject @ req.error

