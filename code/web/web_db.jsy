import { kbc_web_db_core } from './web_db_core.jsy'

export * from './web_db_core.jsy'


export default kbc_web_db
export async function kbc_web_db(opt={}) ::
  opt = @{} db: 'phorbas', store: 'kv', ... opt

  let idb = opt.idb ?? await _idb_open(opt)
  return kbc_web_db_core(idb, opt.store)


async function _idb_open(opt, version=opt.version) ::
  if opt.wipe ::
    await new Promise @ (onsuccess, onerror) =>
      Object.assign @
        indexedDB.deleteDatabase(opt.db),
        {onsuccess, onerror}

  return new Promise @ (resolve, reject) => ::
    let req = indexedDB.open(opt.db, version)
    Object.assign @ req, @{}
      onerror({target: {error}}) ::
        reject(error)

      onsuccess({target: {result: idb}}) ::
        if _idb_has_store(idb, opt.store) ::
          return resolve @ idb

        if null == version ::
          // attempt auto-upgrade for non-explicit version
          idb.close()
          return resolve @ _idb_open(opt, idb.version + 1)

        let err = new Error('kbc_web_db unable to find object store')
        err.store_name = opt.store
        reject(err)

      onupgradeneeded({target: {result: idb}}) ::
        opt.on_upgrade?.(idb, opt)
        if ! _idb_has_store(idb, opt.store) ::
          idb.createObjectStore(opt.store)


const _idb_has_store = (idb, store_name) =>
  [... idb.objectStoreNames].includes(store_name)

