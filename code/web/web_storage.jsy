import {bkc_hexkey_api, as_hex_key, as_u8_key} from '../_utils.jsy'
import {u8_to_base64, base64_to_u8, u8_to_base64url, base64url_to_u8} from 'u8-utils'

export {as_hex_key, as_u8_key}
export {u8_to_base64, base64_to_u8, u8_to_base64url, base64url_to_u8}

export async function _bkc_with_storage(storage, opt={}) ::
  const {encode, decode} = opt, immutable = !! opt.immutable

  return bkc_hexkey_api @:
    bkc_opt: @{} immutable

    hk_has: async hex_key =>
      0 | null === storage.getItem(hex_key)

    hk_get: async hex_key =>
      await decode(storage.getItem(hex_key))

    hk_set: immutable
      ? async (hex_key, u8_content) =>
          null !== storage.getItem(hex_key) ? false
            : void storage.setItem(hex_key, await encode(u8_content))

      : async (hex_key, u8_content) =>
          void storage.setItem(hex_key, await encode(u8_content))


/* #__PURE__ */
const _b64_opt = { encode: u8_to_base64, decode: base64_to_u8 }
export const bkc_with_web_storage_b64 = (storage, opt) =>
  _bkc_with_storage(storage, {__proto__: _b64_opt, ...opt})

/* #__PURE__ */
const _b64url_opt = { encode: u8_to_base64url, decode: base64url_to_u8 }
export const bkc_with_web_storage_b64url = (storage, opt) =>
  _bkc_with_storage(storage, {__proto__: _b64url_opt, ...opt})

export @{}
  bkc_with_web_storage_b64url as bkc_with_web_storage,
  bkc_with_web_storage_b64url as default,
