import { bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

import {u8_to_base64, base64_to_u8, u8_to_base64url, base64url_to_u8} from 'u8-utils'

export {u8_to_base64, base64_to_u8, u8_to_base64url, base64url_to_u8}
export * from '../core.jsy'

export async function _bkc_web_storage(storage, opt={}) ::
  const {b64_encode, b64_decode} = opt
  const immutable = !! opt.immutable
  const prefix = opt.prefix ?? 'bkc-'
  return _bkc_storage_.with @:
    bkc_opt: @{} immutable

    async bkc_exists(hexkey) ::
      let b64_buf = storage.getItem(prefix+hexkey)
      return null == b64_buf ? 0 : 1

    async bkc_fetch(hexkey) ::
      let b64_buf = storage.getItem(prefix+hexkey)
      if b64_buf ::
        let body = await b64_decode(b64_buf)
        return body.slice().buffer

    async bkc_store(hexkey, body) ::
      if immutable && null != storage.getItem(prefix+hexkey) ::
        return false

      body = new Uint8Array @ await bkc_arrbuf(body)
      let b64_buf = await b64_encode(body)
      storage.setItem(prefix+hexkey, b64_buf)
      return null


const _b64_opt = { b64_encode: u8_to_base64, b64_decode: base64_to_u8 }
export const bkc_web_storage_base64 = (storage, opt) =>
  _bkc_web_storage(storage, {__proto__: _b64_opt, ...opt})

const _b64url_opt = { b64_encode: u8_to_base64url, b64_decode: base64url_to_u8 }
export const bkc_web_storage_base64url = (storage, opt) =>
  _bkc_web_storage(storage, {__proto__: _b64url_opt, ...opt})

export @{}
  bkc_web_storage_base64url as bkc_web_storage,
  bkc_web_storage_base64url as default,
