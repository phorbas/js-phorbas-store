import { kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export {kbc_fetch as default, kbc_fetch as kbc_fetch_request}
export function kbc_fetch(url_base, opt={}) ::
  const as_req = opt.as_request ?? _bind_key_request(opt)
  const fetch = opt.fetch ?? globalThis.fetch
  const fetch_opts = opt.fetch_opts
  const immutable = !! opt.immutable

  async function kbc_exists(key, kw) ::
    let resp = await fetch @
      as_req(url_base, key, kw?.signal),
      @{} ... fetch_opts
          method: 'HEAD'
          headers: @{} 'x-hk': key
          signal: kw?.signal

    return resp.ok ? 1 : 0

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    kbc_exists

    async kbc_fetch(key, kw) ::
      let resp = await fetch @
        as_req(url_base, key, kw?.signal),
        @{} ... fetch_opts
            method: 'GET'
            headers: @{} 'x-hk': key
            signal: kw?.signal

      if resp.ok ::
        return await resp.arrayBuffer()

    async kbc_store(key, body, kw) ::
      if immutable && await kbc_exists(key, kw) ::
        return false

      body = await kbc_arrbuf(body)

      let resp = await fetch @
        as_req(url_base, key, kw?.signal),
        @{} ... fetch_opts
            method: 'POST'
            headers: @{}
              'Content-Type': 'application/octet-stream',
              'x-hk': key
            signal: kw?.signal
            body

      if ! resp.ok ::
        let {url, status, statusText} = resp
        let err = new Error(`${statusText || status}`)
        err.url = resp.url
        err.status = status
        return err

      return null


export function _bind_key_request(opt) ::
  const Request = opt.Request ?? globalThis.Request
  return (url_base, key, signal) => new Request @
      new URL(key, url_base)
      @{} signal, ... opt.request_init

