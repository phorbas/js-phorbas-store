import { kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_with_keyv
export async function kbc_with_keyv(keyv, opt={}) ::
  const immutable = !! opt.immutable
  const opt_path = `${opt.path || ''}`
  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      let k = opt_path+key
      let buf = await keyv.get(k)
      return buf ? 1 : 0

    async kbc_fetch(key) ::
      let k = opt_path+key
      let buf = await keyv.get(k)
      return !buf ? void buf
        : new Uint8Array(buf).buffer 

    async kbc_store(key, body) ::
      let k = opt_path+key
      if immutable ::
        let buf = await keyv.get(k)
        if buf :: return false

      try ::
        body = await kbc_arrbuf(body)
        await keyv.set(k, Buffer.from(body))
        return null
      catch err ::
        return err

