import { _bkc_storage_, bkc_arrbuf } from '../bkc_abstract.jsy'

export {bkc_arrbuf}

export default bkc_with_keyv
export async function bkc_with_keyv(keyv, opt={}) ::
  const immutable = !! opt.immutable
  const opt_path = `${opt.path || ''}`
  return _bkc_storage_.with @:
    bkc_opt: @{} immutable

    async bkc_exists(hexkey) ::
      let k = opt_path+hexkey
      let buf = await keyv.get(k)
      return buf ? 1 : 0

    async bkc_fetch(hexkey) ::
      let k = opt_path+hexkey
      let buf = await keyv.get(k)
      return !buf ? void buf
        : new Uint8Array(buf).buffer 

    async bkc_store(hexkey, body) ::
      let k = opt_path+hexkey
      if immutable ::
        let buf = await keyv.get(k)
        if buf :: return false

      try ::
        body = await bkc_arrbuf(body)
        await keyv.set(k, Buffer.from(body))
        return null
      catch err ::
        return err

