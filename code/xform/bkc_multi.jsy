import { bkc_arrbuf, bkc_rec_tools } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

let _bkc_multi_lite
export function bkc_multi(opt={}) ::
  _bkc_multi_lite ??= _bkc_storage_.with(_bkc_multi_mixin_)
  return _bkc_multi_with(_bkc_multi_lite, opt)

export default bkc_multi


const _ident = x => x
export async function _bkc_multi_with(_bkc_multi_, opt) ::
  if 'function' === typeof opt :: opt = {bkc_lookup: opt}
  else opt = { ... opt }

  return _bkc_multi_.with @:
    bkc_opt: @{} proxy: true
    get stg_default() :: return opt.stg_tgt
    set stg_default(stg) :: return opt.stg_tgt = stg

    _xf_decode_body: opt.decode_body ?? _ident
    _xf_lookup: _bkc_multi_lookup(opt.bkc_lookup, opt.encode_body, opt)


export function _bkc_multi_lookup(bkc_lookup_fn, _xf_encode_body, opt) ::
  _xf_encode_body ??= _ident
  return rec => ::
    rec.stg = opt?.stg_tgt
    rec.stg = bkc_lookup_fn?.(rec, bkc_rec_tools) ?? rec.stg
    rec[1] &&= _xf_encode_body(bkc_arrbuf(rec[1]), rec)
    return rec


export const _bkc_multi_mixin_ = @{}
  async bkc_store(key, body, kw) ::
    let rec = this._xf_lookup([key, body])
    return (await rec.stg).bkc_store(rec[0], rec[1], kw)

  async bkc_exists(key, kw) ::
    let rec = this._xf_lookup([key])
    return (await rec.stg).bkc_exists(rec[0], kw)

  async bkc_fetch(key, kw) ::
    let rec = this._xf_lookup([key])
    let body = (await rec.stg).bkc_fetch(rec[0], kw)
    return this._xf_decode_body(body, rec)

