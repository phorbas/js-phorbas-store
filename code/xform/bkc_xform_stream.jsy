import { bkc_arrbuf, bkc_batch_stream  } from '../core.jsy'
import { _bkc_storage_mixin_ } from '../abstract/bkc_abstract.jsy'
import { _bkc_xform_mixin_, _bkc_xform_with } from './bkc_xform.jsy'
import { _decode_key_batch } from './_xform_utils.jsy'

export * from '../core.jsy'

let _bkc_xform_stream_
export function bkc_xform_stream(stg_tgt, opt={}) ::
  if 'function' === typeof opt :: opt = {bkc_xform: opt}

  _bkc_xform_stream_ ??= _bkc_storage_mixin_.with(_bkc_xform_stream_mixin_)
  return _bkc_xform_with(_bkc_xform_stream_, stg_tgt, opt)

export default bkc_xform_stream

export const _bkc_xform_stream_mixin_ = @{}
  ... _bkc_xform_mixin_,

  async * bkc_stream_store(key_body_aiter, kw) ::
    key_body_aiter = bkc_batch_stream(key_body_aiter, this._xf_record, kw)
    for await let batch of this.stg_tgt.bkc_stream_store(key_body_aiter, kw) ::
      yield _decode_key_batch(batch)

  async * bkc_stream_exists(key_aiter, kw) ::
    key_aiter = bkc_batch_stream(key_aiter, this._xf_record, kw)
    for await let batch of this.stg_tgt.bkc_stream_exists(key_aiter, kw) ::
      yield _decode_key_batch(batch)

  async * bkc_stream_fetch(key_aiter, kw) ::
    let _xf_decode_body = this._xf_decode_body
    let xform = kw?.xform, _xf_xform=xform ?? _xf_decode_body
    if _xf_decode_body && xform ::
      _xf_xform = body => xform @ _xf_decode_body(body)

    kw = {... kw, xform: null}

    key_aiter = bkc_batch_stream(key_aiter, this._xf_record, kw)
    for await let batch of this.stg_tgt.bkc_stream_fetch(key_aiter, kw) ::
      _decode_key_batch(batch)
      if _xf_xform ::
        for let rec of batch ::
          rec[1] = _xf_xform(rec[1])

      yield batch

