import {bkc_storage_verify, utf8_to_u8, u8_to_utf8} from './_utils.jsy'
export {bkc_storage_verify, utf8_to_u8, u8_to_utf8} from './_utils.jsy'


// bkc api delegate -- binary key (binary) content
export default bkc_with_delegate
export async function bkc_with_delegate(stg) ::
  bkc_storage_verify(stg)
  return @{}
    async bkc_store(u8_pair_list) ::
      return stg.bkc_store(u8_pair_list)

    async bkc_fetch(u8_key_list) ::
      return stg.bkc_fetch(u8_key_list)

    async bkc_exists(u8_key_list) ::
      return stg.bkc_exists(u8_key_list)


export class PhorbasBase ::
  constructor(stg, ...args) ::
    bkc_storage_verify(stg)
    this.stg = stg
    if args.length ::
      Object.assign(this, ...args)

  with(kw) :: return @{} __proto__: this, ... kw

  /// API-compatible with a phorbas store backend

  async bkc_store(u8_pair_list) ::
    return this.stg.bkc_store(u8_pair_list)
  async bkc_fetch(u8_key_list) ::
    return this.stg.bkc_fetch(u8_key_list)
  async bkc_exists(u8_key_list) ::
    return this.stg.bkc_exists(u8_key_list)


  /// utf8 content API

  async store_utf8(utf8, opt) ::
    return this.store_content(utf8_to_u8(utf8), opt)

  async store_utf8_at(key, utf8, opt) ::
    await this.store_content_at(key, utf8_to_u8(utf8), opt)

  async fetch_utf8(ref) ::
    let u8_res = await this.fetch_content(ref)
    if u8_res ::
      return u8_to_utf8(u8_res)


  async store_json(json_obj, opt) ::
    return this.store_utf8(JSON.stringify(json_obj), opt)

  async store_json_at(key, json_obj, opt) ::
    await this.store_content_at(key, JSON.stringify(json_obj), opt)

  async fetch_json(ref) ::
    let utf8_res = await this.fetch_utf8(ref)
    if utf8_res ::
      return JSON.parse(utf8_res)


  /// obj codec content API

  encode_obj(obj) ::
    return this.codec.encode(obj)
  decode_obj(u8, absent) ::
    return u8
      ? this.codec.decode(u8)
      : absent

  async store_obj(obj, opt) ::
    let u8 = this.encode_obj(obj)
    return this.store_content(u8, opt)

  async store_obj_at(key, obj, opt) ::
    let u8 = this.encode_obj(obj)
    return this.store_content_at(key, u8, opt)

  async fetch_obj(ref, absent) ::
    let u8 = await this.fetch_content(ref)
    return u8 ? this.decode_obj(u8) : absent


  /// u8 content API

  async store_content(u8, opt={}) ::
    let key = await this.key_from(u8, opt)
    return this.store_content_at(key, u8, opt)


  //// Abstract to-be-implemented -- see ./kv_api.jsy and ./api.jsy for implementations
  // async key_from(u8, opt)
  // async store_content_at(key, u8, opt)
  // async fetch_content(ref)
  // async exists(ref)

