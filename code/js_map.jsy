import { _as_arrbuf, kbc_arrbuf } from './core.jsy'
import { _kbc_storage_ } from './abstract/abstract_single.jsy'

export * from './core.jsy'

export function kbc_js_map(map_db, opt={}) ::
  const immutable = !! opt.immutable,
    as_copy = opt.as_copy ?? true // default to copy to prevent accidental mutation

  map_db ||= new Map()
  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      let buf = map_db.get(key)
      return buf ? 1 : 0

    async kbc_fetch(key) ::
      let buf = map_db.get(key)
      return buf && _as_arrbuf(buf, as_copy)

    async kbc_store(key, body) ::
      if immutable && map_db.has(key) ::
        return false

      map_db.set(key, await kbc_arrbuf(body))
      return null

export @{}
  kbc_js_map as default
  kbc_js_map as kbc_with_js_map
