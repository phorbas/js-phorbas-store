import {expect} from 'chai'

import {_rand_u8, _rand_key, _as_body_testpair} from './check_utils.jsy'

export async function validate_kbc_random_key(_stg_, test_body) ::
  let test_key = _rand_key()
  test_body = await _as_body_testpair(test_body)

  :: // random key should not exist
    let ans_exists = _stg_.kbc_exists(test_key)
    ans_exists = await ans_exists.then()
    if 0 !== ans_exists :: throw new Error('Expected kbc_exists of new key return 0')

  :: // body for random key should be undefined
    let ans = _stg_.kbc_fetch(test_key)
    ans = await ans.then()
    expect(ans).to.be.undefined


  :: // store test body at key
    let ans = _stg_.kbc_store(test_key, test_body.raw)
    ans = await ans.then()
    expect(ans).to.be.null

  :: // check key now exists
    let ans_exists = _stg_.kbc_exists(test_key)
    ans_exists = await ans_exists.then()
    if 1 !== ans_exists :: throw new Error('Expected kbc_exists to now be 1')

  :: // check round-trip of body content
    let ans_body = _stg_.kbc_fetch(test_key)
    ans_body = await ans_body.then()
    test_body.expect_roundtrip(ans_body)


export async function validate_kbc_overwrite(_stg_, opt={}) ::
  let test_key = _rand_key()
  let body_versions = Array.from @ {length: 3}, () => _rand_u8(opt.rand_width ?? 32)

  const immutable = _stg_.kbc_opt.immutable
  expect(immutable).to.be.oneOf @# true, false, undefined

  expect(await _stg_.kbc_exists(test_key)).to.equal(0)

  :: // first store
    expect(await _stg_.kbc_store(test_key, body_versions[0])).to.be.null
    expect(await _stg_.kbc_exists(test_key)).to.equal(1)

    let rt_buf = await _stg_.kbc_fetch(test_key)
    expect(rt_buf).to.be.an.instanceof(ArrayBuffer)
    expect(new Uint8Array(rt_buf)).to.deep.equal(body_versions[0])


  :: // second store
    let ans_store = await _stg_.kbc_store(test_key, body_versions[1])
    if ! immutable ::
      expect(ans_store).to.be.null

      let rt_buf = await _stg_.kbc_fetch(test_key)
      expect(rt_buf).to.be.an.instanceof(ArrayBuffer)
      expect(new Uint8Array(rt_buf)).to.deep.equal(body_versions[1])

    else ::
      expect(ans_store).to.be.false

      let rt_buf = await _stg_.kbc_fetch(test_key)
      expect(rt_buf).to.be.an.instanceof(ArrayBuffer)
      expect(new Uint8Array(rt_buf)).to.deep.equal(body_versions[0])

  :: // third store
    let ans_store = await _stg_.kbc_store(test_key, body_versions[2])

    if ! immutable ::
      expect(ans_store).to.be.null

      let rt_buf = await _stg_.kbc_fetch(test_key)
      expect(rt_buf).to.be.an.instanceof(ArrayBuffer)
      expect(new Uint8Array(rt_buf)).to.deep.equal(body_versions[2])

    else ::
      expect(ans_store).to.be.false

      let rt_buf = await _stg_.kbc_fetch(test_key)
      expect(rt_buf).to.be.an.instanceof(ArrayBuffer)
      expect(new Uint8Array(rt_buf)).to.deep.equal(body_versions[0])

