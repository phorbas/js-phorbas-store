import {expect} from 'chai'

import {_expect_aiter, _rand_hexkey_batch, _hexkey_with_rand_body} from './check_utils.jsy'

export async function validate_bkc_stream_batch(_stg_, opt={}) ::
  let test_key_list = _rand_hexkey_batch(opt.count ?? 5)
  let test_body_list = test_key_list.map(_hexkey_with_rand_body(opt.rand_width ?? 32))

  :: // bkc_stream_store() batches of bkc_pair works with Promise.all
    let ans_stream_store = _stg_.bkc_stream_store(test_body_list)
    _expect_aiter(ans_stream_store)

    for await let batch_result of ans_stream_store ::

      for let rec of batch_result ::
        expect(rec).to.be.an.instanceOf(Array).lengthOf(2)
        expect(rec[0]).to.be.a.string
        expect(rec.then, 'bkc_stream_store rec.then').to.be.a('function')

        let tuple = await rec.then()
        expect(tuple[0]).to.be.a.string
        expect(tuple[0]).equal(rec[0])
        expect(tuple[1]).to.be.null
        expect(tuple[1]).to.equal(await rec[1])

      for let tuple of await Promise.all(batch_result) ::
        expect(tuple[0]).to.be.a.string
        expect(tuple[1]).to.be.null


  :: // bkc_stream_fetch() batches of bkc_pair works with Promise.all
    let ans_stream_fetch = _stg_.bkc_stream_fetch(test_key_list)

    let body_by_key = new Map(test_body_list)

    for await let batch_result of ans_stream_fetch ::

      for let rec of batch_result ::
        expect(rec).to.be.an.instanceOf(Array).lengthOf(2)
        expect(rec[0]).to.be.a.string
        expect(rec.then, 'bkc_stream_fetch rec.then').to.be.a('function')

        let tuple = await rec.then()
        expect(tuple[0]).to.be.a.string
        expect(tuple[0]).equal(rec[0])

        expect @ new Uint8Array @ tuple[1]
        .to.deep.equal @ new Uint8Array @ await rec[1]
        .to.deep.equal @ body_by_key.get(tuple[0])


      for let tuple of await Promise.all(batch_result) ::
        expect(tuple[0]).to.be.a.string

        expect @ new Uint8Array @ tuple[1]
        .to.deep.equal @ body_by_key.get(tuple[0])


  :: // bkc_stream_exists() batches of bkc_pair works with Promise.all
    let ans_stream_exists = _stg_.bkc_stream_exists(test_body_list)
    _expect_aiter(ans_stream_exists)

    for await let batch_result of ans_stream_exists ::

      for let rec of batch_result ::
        expect(rec).to.be.an.instanceOf(Array).lengthOf(2)
        expect(rec[0]).to.be.a.string
        expect(rec.then, 'bkc_stream_exists rec.then').to.be.a('function')

        let tuple = await rec.then()
        expect(tuple[0]).to.be.a.string
        expect(tuple[0]).equal(rec[0])
        expect(tuple[1]).to.equal(1)
        expect(tuple[1]).to.equal(await rec[1])

      for let tuple of await Promise.all(batch_result) ::
        expect(tuple[0]).to.be.a.string
        expect(tuple[1]).to.equal(1)


export async function validate_bkc_stream_batch_xform(_stg_, opt={}) ::
  let test_key_list = _rand_hexkey_batch(opt.count ?? 5)
  let test_body_list = test_key_list.map(_hexkey_with_rand_body(opt.rand_width ?? 32))

  :: // bkc_stream_store() batches of bkc_pair works with Promise.all
    let ans_stream_store = _stg_.bkc_stream_store(test_body_list)
    for await let batch of ans_stream_store ::
      for await let rec of batch ::

  :: // bkc_stream_exists()
    let ans_stream_exists = _stg_.bkc_stream_exists(test_key_list)
    for await let batch of ans_stream_exists ::
      for await let [hk, entry_exists] of batch ::
        expect(hk).to.be.a.string
        expect(test_key_list.includes(hk)).to.be.true
        expect(await entry_exists).to.equal(1)

  :: // xform with bkc_stream_fetch() batches of bkc_pair works with Promise.all
    let sym_test = Symbol('validate bkc_stream_fetch xform')
    let ans_stream_fetch = _stg_.bkc_stream_fetch @ test_key_list, @{}
      xform: async buf => [sym_test, await buf]

    let body_by_key = new Map(test_body_list)

    for await let batch_result of ans_stream_fetch ::

      for let rec of batch_result ::
        expect(rec).to.be.an.instanceOf(Array).lengthOf(2)
        expect(rec[0]).to.be.a.string
        expect(rec.then, 'bkc_stream_fetch rec.then').to.be.a('function')

        let tuple = await rec.then()
        expect(tuple[0]).to.be.a.string
        expect(tuple[0]).equal(rec[0])

        // validate xform happened
        expect(tuple[1], "stream xform incorrect").to.be.an('array').lengthOf(2)
        expect(tuple[1][0], "stream xform incorrect").equal(sym_test)

        let test_body = body_by_key.get(tuple[0])
        expect @ new Uint8Array @ tuple[1][1]
        .to.deep.equal @ test_body

      // check that Promise.all works with batch_results
      for let tuple of await Promise.all(batch_result) ::
        expect(tuple[0]).to.be.a.string

        let test_body = body_by_key.get(tuple[0])
        expect @ new Uint8Array @ tuple[1][1]
        .to.deep.equal @ test_body


export async function validate_bkc_stream_batch_abort(_stg_, opt={}) ::
  let test_key_list = _rand_hexkey_batch(opt.count ?? 2)
  let test_body_list = test_key_list.map(_hexkey_with_rand_body(opt.rand_width ?? 32))

  async function * testgen(inc_body, abort_controller) ::
    expect(abort_controller.signal).to.be.a('AbortSignal')
    const test_list = inc_body ? test_body_list : test_key_list
    yield [test_list[0]]
    abort_controller.abort('Testing abort controller')
    yield [test_list[1]]
    throw new Error("Should not ask for another batch")


  ::
    let count=0, ac = new AbortController(), hexkey_aiter = testgen(true, ac)
    for await let batch of _stg_.bkc_stream_store(hexkey_aiter, {signal: ac.signal}) ::
      for let rec of batch ::
        expect(rec[0]).to.equal(test_key_list[count])
        expect(await rec[1]).to.be.null

      count++
    expect(count).to.be.oneOf([1,2])

  ::
    let count=0, ac = new AbortController(), hexkey_aiter = testgen(false, ac)
    for await let batch of _stg_.bkc_stream_exists(hexkey_aiter, {signal: ac.signal}) ::
      for let rec of batch ::
        expect(rec[0]).to.equal(test_key_list[count])
        expect(await rec[1]).to.be.oneOf([0,1])

      count++
    expect(count).to.be.oneOf([1,2])

  ::
    let count=0, ac = new AbortController(), hexkey_aiter = testgen(false, ac)
    for await let batch of _stg_.bkc_stream_fetch(hexkey_aiter, {signal: ac.signal}) ::
      for let rec of batch ::
        expect(rec[0]).to.equal(test_key_list[count])
        expect(await rec[1]).to.be.an('ArrayBuffer')
        expect(new Uint8Array(await rec[1]))
        .to.deep.equal(new Uint8Array(test_body_list[count][1]))

      count++
    expect(count).to.be.oneOf([1,2])


export async function validate_bkc_stream(_stg_, opt={}) ::
  let test_key_list = _rand_hexkey_batch(opt.count ?? 5)
  let test_body_list = test_key_list.map(_hexkey_with_rand_body(opt.rand_width ?? 32))

  :: // random keys should not exist
    let ans_stream_exists = _stg_.bkc_stream_exists @
      opt.use_keys ? test_key_list : test_body_list

    _expect_aiter(ans_stream_exists)

    let count = 0
    for await let batch_result of ans_stream_exists ::
      for let [hk, ans] of batch_result ::
        expect(test_key_list.includes(hk)).to.be.true
        ans = await ans
        expect(ans).to.equal(0)
        count++

    expect(count).to.equal(test_key_list.length)

  :: // body for random key should be undefined
    let ans_stream_fetch = _stg_.bkc_stream_fetch @
      opt.use_keys ? test_key_list : test_body_list

    _expect_aiter(ans_stream_fetch)

    let count = 0
    for await let batch_result of ans_stream_fetch ::
      for let [hk, ans] of batch_result ::
        expect(test_key_list.includes(hk)).to.be.true
        ans = await ans
        expect(ans).to.be.undefined
        count++

    expect(count).to.equal(test_key_list.length)

  :: // store test body at key
    let ans_stream_store = _stg_.bkc_stream_store(test_body_list)

    _expect_aiter(ans_stream_store)

    let count = 0
    for await let batch_result of ans_stream_store ::
      for let [hk, ans] of batch_result ::
        expect(test_key_list.includes(hk)).to.be.true
        ans = await ans
        expect(ans).to.be.null
        count++

    expect(count).to.equal(test_key_list.length)

  :: // check keys now exist
    let ans_stream_exists = _stg_.bkc_stream_exists @
      opt.use_keys ? test_key_list : test_body_list

    _expect_aiter(ans_stream_exists)

    let count = 0
    for await let batch_result of ans_stream_exists ::
      for let [hk, ans] of batch_result ::
        expect(test_key_list.includes(hk)).to.be.true
        ans = await ans
        expect(ans).to.equal(1)
        count++

    expect(count).to.equal(test_key_list.length)


  :: // check round-trip of body content
    let ans_stream_fetch = _stg_.bkc_stream_fetch @
      opt.use_keys ? test_key_list : test_body_list

    _expect_aiter(ans_stream_fetch)

    let body_by_key = new Map(test_body_list)

    let count = 0
    for await let batch_result of ans_stream_fetch ::
      for let [hk, ans] of batch_result ::
        ans = await ans
        expect(new Uint8Array(ans))
        .to.deep.equal(body_by_key.get(hk))
        count++

    expect(count).to.equal(test_key_list.length)

