export const _kbc_storage_mixin_ = @{}
  //kbc_opt: {}
  //async kbc_store(key, body, {signal}) ::
  //async kbc_exists(key, {signal}) ::
  //async kbc_fetch(key, {signal}) ::

  //async * kbc_stream_store(key_body_aiter, {signal}) ::
  //async * kbc_stream_exists(key_aiter, {signal}) ::
  //async * kbc_stream_fetch(key_aiter, {signal}) ::

  _kbc_record(fn_record_op) ::
    return rec => ::
      (rec = [... rec]).then = _rec_then
      if fn_record_op :: rec[1] = fn_record_op(rec)
      return rec

  with(...args) ::
    return Object.assign({__proto__: this}, ...args)

function _rec_then(y,n) ::
  let rec = [... this]
  return Promise.resolve(rec[1])
    .then(ans => (rec[1]=ans, rec))
    .then(y,n)


export const _kbc_api_ = @{}
  __proto__: _kbc_storage_mixin_

  get kbc_opt() ::
    return this.stg.kbc_opt

  async check(key, err) ::
    err &&= await err
    if (err) throw err
    return err

  async kbc_store(key, body) ::
    let err = this.stg.kbc_store(key, body)
    return this.check(key, err)
  kbc_exists(key) ::
    return this.stg.kbc_exists(key)
  kbc_fetch(key) ::
    return this.stg.kbc_fetch(key)

  async * kbc_stream_store(key_body_aiter, kw) ::
    for await let batch of this.stg.kbc_stream_store(key_body_aiter, kw) ::
      // patch the error promises with this.check
      let check = this.check
      for let i in batch ::
        batch[i][1] = check.apply(this, batch[i])
      yield batch
  kbc_stream_exists(key_aiter, kw) ::
    return this.stg.kbc_stream_exists(key_aiter, kw)
  kbc_stream_fetch(key_aiter, kw) ::
    return this.stg.kbc_stream_fetch(key_aiter, kw)


// kbc api verification -- binary key (binary) content
export function kbc_storage_verify(stg, allow_null) ::
  if null == stg ::
    if allow_null :: return stg
    throw new TypeError('Expected a non-null storage instance')

  _is_fn(stg, 'kbc_exists')
  _is_fn(stg, 'kbc_fetch')
  _is_fn(stg, 'kbc_store')

  _is_fn(stg, 'kbc_stream_exists', 2)
  _is_fn(stg, 'kbc_stream_fetch', 2)
  _is_fn(stg, 'kbc_stream_store', 2)

  if 'object' !== typeof stg.kbc_opt ::
    throw new TypeError('Expected object "kbc_opt" not present')

  return stg

function _is_fn(o, k, n_args) ::
  let fn = o[k]
  if 'function' !== typeof fn :: throw new TypeError(`Expected function "${k}" not present`)
  if n_args && fn.length !== n_args :: throw new TypeError(`Expected function "${k}" to have ${n_args} args, found ${fn.length}: ${fn}`)

