import {utf8_to_u8, u8_to_utf8} from './_utils.jsy'
import {bkc_storage_verify, PhorbasBase} from './abstract.jsy'

export {phorbas_store_api as phorbas_store}
export async function phorbas_store_api(stg, kw_init) ::
  return new PhorbasStoreAPI(await stg, kw_init)


export class PhorbasStoreAPI extends PhorbasBase ::
  with_sync(sync) :: return this.with @: sync
  with_opaque(opaque) :: return this.with @: opaque
  get codec() :: return this.opaque.codec

  /// API from PhorbasBase
  /// utf8 content
  // async store_utf8(utf8, opt) ::
  // async store_utf8_at(key, utf8, opt) ::
  // async fetch_utf8(ref) ::

  /// obj codec content API
  // encode_obj(obj) ::
  // decode_obj(u8, absent) ::
  // async store_obj(obj, opt) ::
  // async store_obj_at(key, obj, opt) ::
  // async fetch_obj(ref, absent) ::


  // u8 content API

  key_from(u8, opt) ::
    let opaque = this.opaque
    return opt.rand
      ? opaque.from_random()
      : opaque.from_u8(u8)

  async store_content(u8, opt={}) ::
    let key = await @ opt.rand
      ? this.opaque.from_random()
      : this.opaque.from_u8(u8)

    return await this.store_content_at(key, u8, opt)


  async store_content_at(key, u8, opt) ::
    if opt && opt.k1 ::
      key = await this.opaque.from_k1ref(key)

    let k2loc
    if key.encode_content ::
      u8 = await key.encode_content(u8)
      k2loc = key.k2loc
    else if Array.isArray(key) ::
      k2loc = key[0] // k21pair[0]
    else k2loc = key

    let [[, err]] = await this.bkc_store([[k2loc, u8]])
    if null != err ::
      throw err

    let {sync} = this
    if undefined !== sync ::
      sync.add(k2loc)

    if opt ::
      return opt.as_key ? key : key.k21pair()


  async fetch_content(ref) ::
    if ! ref :: return

    let {opaque} = this
    if undefined !== opaque ::
      let k = await opaque.from_k21pair(ref)
      let [[, u8_res]] = await this.bkc_fetch([k.k2loc])
      return u8_res && k.decode_content(u8_res)

    else if Array.isArray(ref) ::
      ref = ref[0] // k2loc = k21pair[0]

    if ref ::
      let [[, u8_res]] = await this.bkc_fetch([ref])
      return u8_res


  async exists(ref) ::
    if ! ref :: return

    let {opaque} = this
    if undefined !== opaque ::
      @ {k2loc: ref} = await opaque.from_k21pair(ref)

    else if Array.isArray(ref) ::
      ref = ref[0] // k2loc = k21pair[0]

    if ref ::
      let [[, ans]] = await this.bkc_exists([ref])
      return ans

