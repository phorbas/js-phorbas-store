import {describe, it, before, after} from '#test_bdd'

import {bkc_storage_verify} from './bkc_abstract.jsy'
import * as check_single from './validate/check_single.jsy'
import * as check_aiter from './validate/check_aiter.jsy'
import * as check_async_gen from './validate/check_async_gen.jsy'

export * from './_utils.jsy'
export {bkc_storage_verify} from './bkc_abstract.jsy'
export * from './validate/check_utils.jsy'
export * from './validate/check_single.jsy'
export * from './validate/check_aiter.jsy'
export * from './validate/check_async_gen.jsy'


export const validate_backend = Object.assign @
  _validate_backend.bind(null, describe)
  @{} only: _validate_backend.bind(null, describe.only)
      skip: _validate_backend.bind(null, describe.skip)


function _validate_backend(_describe_fn, backend_name, opt) ::
  if 'function' === typeof opt :: opt = {bkc_create: opt}

  _describe_fn @ `backend: ${backend_name}`, function () ::
    if undefined !== opt.slow :: opt.slow(this)

    let _stg_, _ctx_
    before @::>
      _stg_ = await opt.bkc_create(_ctx_={})
      if null == _stg_ ::
        throw new TypeError("create bkc_storage did not return an instance")

    after @::>
      await opt.bkc_cleanup?.(_stg_, _ctx_)
      _ctx_ = null


    it @ 'bkc storage verify', () => bkc_storage_verify(_stg_)


    describe @ 'bkc api', @::
      it @ 'with string', () => check_single.validate_bkc_random_key(_stg_, 'some test string')
      it @ 'with array', () => check_single.validate_bkc_random_key(_stg_, ['some', ' ~ ', 'test', ' ~ ', 'string', 'array'])
      it @ 'with iterable', () => check_single.validate_bkc_random_key(_stg_, Iterator.from(['some', ' ~ ', 'test', ' ~ ', 'iterator']))
      it @ 'with Blob', () => check_single.validate_bkc_random_key(_stg_, new Blob(['some', ' ~ ', 'test', ' ~ ', 'blob']))
      it @ 'with Blob with type', () => check_single.validate_bkc_random_key(_stg_, new Blob(['some', ' ~ ', 'plaintext', ' ~ ', 'blob'], {type: 'text/plain'}))

      it @ 'with random 16 byte binary', () => check_single.validate_bkc_random_key(_stg_, 16)
      it @ 'with random 1024 byte binary', () => check_single.validate_bkc_random_key(_stg_, 1024)
      it @ 'with random 16384 byte binary', () => check_single.validate_bkc_random_key(_stg_, 16384)

      it @ 'overwrite test', () => check_single.validate_bkc_overwrite(_stg_)

      it @ 'stream with async generator', () => check_async_gen.validate_bkc_stream_async_gen(_stg_)
      it @ 'stream with async iteration', () => check_aiter.validate_bkc_stream(_stg_)
      it @ 'stream with async batch', () => check_aiter.validate_bkc_stream_batch(_stg_)


    let custom_tests = opt.tests
    if custom_tests ::
      if ! custom_tests[Symbol.iterator] ::
        custom_tests = Object.entries(custom_tests)

      describe @ 'custom', @::
        for let [test_name, test_fn] of custom_tests ::
          it @ test_name, () => test_fn(_stg_, _ctx_)

