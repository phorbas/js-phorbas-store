import {bkc_hexkey_api, as_hex_key, as_u8_key} from '../_utils.jsy'

export {as_hex_key, as_u8_key}


export default bkc_with_fsp
export async function bkc_with_fsp(opt={}) ::
  let immutable = !! opt.immutable
  let _enc_r = @{} encoding: null, flag: 'r'
  let _enc_w = @{} encoding: null, flag: immutable ? 'wx' : 'w'
  let {stat, readFile, writeFile} = await opt.fsp
  let base = opt.base || './var/'
  let ext = opt.ext || '.cbor'

  return bkc_hexkey_api @:
    bkc_opt: @{} immutable

    async hk_has(hex_key) ::
      try ::
        await stat(`${base}${hex_key}${ext}`)
        return 1
      catch err ::
        if 'ENOENT' === err.code ::
          return 0
        throw err

    async hk_get(hex_key) ::
      try ::
        const buf = await readFile(`${base}${hex_key}${ext}`, _enc_r)
        return Uint8Array.from(buf)
      catch err ::
        if 'ENOENT' !== err.code ::
          throw err

    async hk_set(hex_key, u8_content) ::
      try ::
        await writeFile(`${base}${hex_key}${ext}`, u8_content, _enc_w)
      catch err ::
        return immutable && 'EEXIST' === err.code ? false : err

