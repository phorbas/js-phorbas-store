import { bkc_arrbuf, bkc_rec_arrbuf, bkc_batch_stream, _bkc_fetch_ans  } from '../core.jsy'
import { _bkc_stream_storage_ } from '../abstract/bkc_abstract_stream.jsy'

export * from '../core.jsy'

export default bkc_with_lmdb

const _dbi_default = { name: 'phorbas', create: true }
export async function bkc_with_lmdb(lmdb_env, opt) ::
  if ! opt :: opt = {}
  else if 'string' === typeof opt ::
    opt = @{} dbi: { ..._dbi_default, name: opt }

  opt.dbi ??= { ..._dbi_default }

  const immutable = !! opt.immutable
  const dbi = lmdb_env.openDbi({keyIsString: true, ...opt.dbi})
  return _bkc_stream_storage_.with @:
    bkc_opt: @{} immutable

    async * bkc_stream_exists(hexkey_aiter, kw) ::
      let _bkc_rec = this._bkc_record()
      for await let batch of bkc_batch_stream(hexkey_aiter, _bkc_rec, kw) ::
        let _txn = lmdb_env.beginTxn()
        for let rec of batch ::
          let buf = _txn.getBinary(dbi, rec[0])
          rec[1] = null == buf ? 0 : 1

        await _txn.commit()
        yield batch


    async * bkc_stream_fetch(hexkey_aiter, kw) ::
      let _bkc_rec = this._bkc_record()
      for await let batch of bkc_batch_stream(hexkey_aiter, _bkc_rec, kw) ::
        let _txn = lmdb_env.beginTxn()
        for let rec of batch ::
          let buf = _txn.getBinary(dbi, rec[0]) ?? void 0
          rec[1] = _bkc_fetch_ans(buf, false, kw?.xform)

        await _txn.commit()
        yield batch


    async * bkc_stream_store(hexkey_body_aiter, kw) ::
      let _bkc_body_rec = this._bkc_record(bkc_rec_arrbuf)

      for await let batch of bkc_batch_stream(hexkey_body_aiter, _bkc_body_rec, kw) ::
        for let rec of batch ::
          rec[1] = await rec[1]

        let _txn = lmdb_env.beginTxn()
        if immutable ::
          for let rec of batch ::
            if null == _txn.getBinary(dbi, rec[0]) ::
              _txn.putBinary(dbi, rec[0], Buffer.from(rec[1]))
              rec[1] = null
            else rec[1] = false
            
        else for let rec of batch ::
          _txn.putBinary(dbi, rec[0], Buffer.from(rec[1]))
          rec[1] = null

        await _txn.commit()
        yield batch

