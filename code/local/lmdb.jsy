import { kbc_arrbuf, kbc_rec_arrbuf, kbc_batch_stream, _kbc_fetch_ans  } from '../core.jsy'
import { _kbc_stream_storage_ } from '../abstract/abstract_stream.jsy'

export * from '../core.jsy'

export default kbc_with_lmdb

const _dbi_default = { name: 'phorbas', create: true }
export async function kbc_with_lmdb(lmdb_env, opt) ::
  if ! opt :: opt = {}
  else if 'string' === typeof opt ::
    opt = @{} dbi: { ..._dbi_default, name: opt }

  opt.dbi ??= { ..._dbi_default }

  const immutable = !! opt.immutable
  const dbi = lmdb_env.openDbi({keyIsString: true, ...opt.dbi})
  return _kbc_stream_storage_.with @:
    kbc_opt: @{} immutable

    async * kbc_stream_exists(key_aiter, kw) ::
      let _kbc_rec = this._kbc_record()
      for await let batch of kbc_batch_stream(key_aiter, _kbc_rec, kw) ::
        let _txn = lmdb_env.beginTxn()
        for let rec of batch ::
          let buf = _txn.getBinary(dbi, rec[0])
          rec[1] = null == buf ? 0 : 1

        await _txn.commit()
        yield batch


    async * kbc_stream_fetch(key_aiter, kw) ::
      let _kbc_rec = this._kbc_record()
      for await let batch of kbc_batch_stream(key_aiter, _kbc_rec, kw) ::
        let _txn = lmdb_env.beginTxn()
        for let rec of batch ::
          let buf = _txn.getBinary(dbi, rec[0]) ?? void 0
          rec[1] = _kbc_fetch_ans(buf, false)

        await _txn.commit()
        yield batch


    async * kbc_stream_store(key_body_aiter, kw) ::
      let _kbc_body_rec = this._kbc_record(kbc_rec_arrbuf)

      for await let batch of kbc_batch_stream(key_body_aiter, _kbc_body_rec, kw) ::
        for let rec of batch ::
          rec[1] = await rec[1]

        let _txn = lmdb_env.beginTxn()
        if immutable ::
          for let rec of batch ::
            if null == _txn.getBinary(dbi, rec[0]) ::
              _txn.putBinary(dbi, rec[0], Buffer.from(rec[1]))
              rec[1] = null
            else rec[1] = false
            
        else for let rec of batch ::
          _txn.putBinary(dbi, rec[0], Buffer.from(rec[1]))
          rec[1] = null

        await _txn.commit()
        yield batch

