import { _bkc_storage_, bkc_arrbuf } from '../bkc_abstract.jsy'

export {bkc_arrbuf}

export default bkc_with_fsp
export async function bkc_with_fsp(opt={}) ::
  const immutable = !! opt.immutable
  let _enc_r = @{} encoding: null, flag: 'r'
  let _enc_w = @{} encoding: null, flag: immutable ? 'wx' : 'w'
  let {stat, readFile, writeFile} = await opt.fsp
  let base = opt.base || './var/'
  let ext = opt.ext || '.bin'

  return _bkc_storage_.with @:
    bkc_opt: @{} immutable

    async bkc_exists(hexkey) ::
      try ::
        await stat(`${base}${hexkey}${ext}`)
        return 1
      catch err ::
        if 'ENOENT' === err.code ::
          return 0
        throw err

    async bkc_fetch(hexkey) ::
      try ::
        const buf = await readFile(`${base}${hexkey}${ext}`, _enc_r)
        return buf.buffer
      catch err ::
        if 'ENOENT' !== err.code ::
          throw err

    async bkc_store(hexkey, body) ::
      try ::
        body = new Uint8Array @ await bkc_arrbuf(body)
        await writeFile(`${base}${hexkey}${ext}`, body, _enc_w)
        return null
      catch err ::
        return immutable && 'EEXIST' === err.code ? false : err ?? null

