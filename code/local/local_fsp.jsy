import { kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_with_fsp
export function kbc_with_fsp(opt={}) ::
  const immutable = !! opt.immutable,
    _enc_r = { encoding: null, flag: 'r' },
    _enc_w = { encoding: null, flag: immutable ? 'wx' : 'w' },
    base = opt.base || './var/',
    ext = opt.ext || '.bin',
    fsp = opt.fsp

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    async kbc_exists(key) ::
      try ::
        await fsp.stat(`${base}${key}${ext}`)
        return 1
      catch err ::
        if 'ENOENT' === err.code ::
          return 0
        throw err

    async kbc_fetch(key) ::
      try ::
        const buf = await fsp.readFile(`${base}${key}${ext}`, _enc_r)
        return buf.buffer
      catch err ::
        if 'ENOENT' !== err.code ::
          throw err

    async kbc_store(key, body) ::
      try ::
        body = new Uint8Array(await kbc_arrbuf(body))
        await fsp.writeFile(`${base}${key}${ext}`, body, _enc_w)
        return null
      catch err ::
        return immutable && 'EEXIST' === err.code ? false : err ?? null

