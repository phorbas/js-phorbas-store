import { bkc_arrbuf } from '../core.jsy'
import { _bkc_storage_ } from '../abstract/bkc_abstract_single.jsy'

export * from '../core.jsy'

export default bkc_with_fs
export async function bkc_with_fs(opt={}) ::
  let immutable = !! opt.immutable
  let _enc_r = @{} encoding: null, flag: 'r'
  let _enc_w = @{} encoding: null, flag: immutable ? 'wx' : 'w'
  let {stat, readFile, writeFile} = await opt.fs
  let base = opt.base || './var/'
  let ext = opt.ext || '.bin'

  return _bkc_storage_.with @:
    bkc_opt: @{} immutable

    bkc_exists: hexkey =>
      new Promise @\ resolve, reject ::
        stat @ `${base}${hexkey}${ext}`,
          (err) => ::
            if ! err ::
              resolve(1)
            else if 'ENOENT' === err.code ::
              resolve(0)
            else reject(err)

    bkc_fetch: hexkey =>
      new Promise @\ resolve, reject ::
        readFile @ `${base}${hexkey}${ext}`, _enc_r,
          (err, buf) => ::
            if ! err ::
              resolve @ buf.buffer
            else if 'ENOENT' === err.code ::
              resolve()
            else reject(err)

    bkc_store: @\ hexkey, body =>
      new Promise @\ resolve, reject ::>
        body = new Uint8Array @ await bkc_arrbuf(body)
        writeFile @ `${base}${hexkey}${ext}`, body, _enc_w,
          err => !err ? resolve(null)
            : immutable && 'EEXIST' === err.code ? resolve(false)
            : resolve(err)

