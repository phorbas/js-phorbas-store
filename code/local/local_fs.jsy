import { kbc_arrbuf } from '../core.jsy'
import { _kbc_storage_ } from '../abstract/abstract_single.jsy'

export * from '../core.jsy'

export default kbc_with_fs
export function kbc_with_fs(opt={}) ::
  const immutable = !! opt.immutable,
    _enc_r = { encoding: null, flag: 'r' },
    _enc_w = { encoding: null, flag: immutable ? 'wx' : 'w' },
    base = opt.base || './var/',
    ext = opt.ext || '.bin',
    fs = opt.fs

  return _kbc_storage_.with @:
    kbc_opt: @{} immutable

    kbc_exists: key =>
      new Promise @\ resolve, reject ::
        fs.stat @ `${base}${key}${ext}`,
          (err) => ::
            if ! err ::
              resolve(1)
            else if 'ENOENT' === err.code ::
              resolve(0)
            else reject(err)

    kbc_fetch: key =>
      new Promise @\ resolve, reject ::
        fs.readFile @ `${base}${key}${ext}`, _enc_r,
          (err, buf) => ::
            if ! err ::
              resolve @ buf.buffer
            else if 'ENOENT' === err.code ::
              resolve()
            else reject(err)

    kbc_store: @\ key, body =>
      new Promise @\ resolve, reject ::>
        body = new Uint8Array(await kbc_arrbuf(body))
        fs.writeFile @ `${base}${key}${ext}`, body, _enc_w,
          err => !err ? resolve(null)
            : immutable && 'EEXIST' === err.code ? resolve(false)
            : resolve(err)

